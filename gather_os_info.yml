---
- name: Gather OS Information
  hosts: all
  vars:
    script_name: "gather_os_info"
    result_dir: "/tmp/results"
    result_file: "{{ result_dir }}/{{ script_name }}_{{ ansible_date_time.date }}.csv"
  tasks:
    - name: Get OS name and version
      ansible.builtin.command: cat /etc/os-release
      register: os_info

    - name: Parse OS name and version
      ansible.builtin.set_fact:
        os_name_version: "{{ os_info.stdout_lines | select('match', '^NAME=') | map('regex_replace', '^NAME=\"(.*)\"$', '\\1') | first }} {{ os_info.stdout_lines | select('match', '^VERSION=') | map('regex_replace', '^VERSION=\"(.*)\"$', '\\1') | first }}"

    - name: Collect OS info results
      ansible.builtin.lineinfile:
        path: /tmp/results.csv
        line: "{{ inventory_hostname }},{{ os_name_version }}"
        create: yes
        state: present

    - name: Copy results to Ansible server
      ansible.builtin.fetch:
        src: /tmp/results.csv
        dest: "{{ result_file }}"
        flat: yes

    - name: Remove results from remote servers
      ansible.builtin.file:
        path: /tmp/results.csv
        state: absent

  post_tasks:
      - name: Create success hosts list
        ansible.builtin.shell: |
          awk -F, '$3 == "0" {print $1}' > {{ result_dir }}/success_hosts.txt
        run_once: true
        delegate_to: localhost

      - name: Create failed hosts list
        ansible.builtin.shell: |
          awk -F, '$3 != "0" {print $1}' > {{ result_dir }}/failed_hosts.txt
        run_once: true
        delegate_to: localhost

      - name: Count success hosts
        ansible.builtin.shell: |
          wc -l < {{ result_dir }}/success_hosts.txt > {{ result_dir }}/success_count.txt
        run_once: true
        delegate_to: localhost

      - name: Count failed hosts
        ansible.builtin.shell: |
          wc -l < {{ result_dir }}/failed_hosts.txt > {{ result_dir }}/failed_count.txt
        run_once: true
        delegate_to: localhost


